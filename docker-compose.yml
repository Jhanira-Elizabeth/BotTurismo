version: "3.3"

# docker-compose.yml
services:
  pg_tursd:
    image: postgres:17
    # Nombre para el hotnsme/address
    container_name: pg_tursd
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: tursd
      POSTGRES_PASSWORD: tursd
      POSTGRES_DB: tursd
      POSTGRES_HOST_AUTH_METHOD: md5 
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tursd -d tursd"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin_tursd:
    image: dpage/pgadmin4
    container_name: pgadmin_tursd
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: tursd@mail.com
      PGADMIN_DEFAULT_PASSWORD: espe
    depends_on:
      pg_tursd:
        condition: service_healthy

  # ¡NUEVO SERVICIO PARA TU APLICACIÓN BACKEND!
  backend_app:
    build: . # Docker buscará el Dockerfile en el directorio actual (donde está docker-compose.yml)
    container_name: tursd_backend_app
    ports:
      - "3000:3000" # Mapea el puerto 3000 del contenedor al puerto 3000 de tu máquina local
    environment: # Estas son las variables de entorno que tu aplicación usará DENTRO del contenedor
      DB_HOST: pg_tursd # ¡CLAVE! Aquí usas el NOMBRE del servicio de la base de datos de Docker Compose
      DB_PORT: 5432
      DB_USER: tursd
      DB_PASSWORD: tursd # ¡CLAVE! La contraseña correcta para el usuario 'tursd'
      DB_NAME: tursd
      PORT: 3000 # El puerto interno en el que tu aplicación Node.js escucha
    depends_on:
      pg_tursd:
        condition: service_healthy # Asegura que la DB esté lista antes de iniciar el backend

volumes:
  pg_data: